Given K sorted linked lists of different sizes. The task is to merge them in such a way that after merging they will be a single sorted linked list.

Example 1:

Input:
K = 4
value = {{1,2,3},{4 5},{5 6},{7,8}}
Output: 1 2 3 4 5 5 6 7 8
Explanation:
The test case has 4 sorted linked 
list of size 3, 2, 2, 2
1st    list     1 -> 2-> 3
2nd   list      4->5
3rd    list      5->6
4th    list      7->8
The merged list will be
1->2->3->4->5->5->6->7->8.
Example 2:

Input:
K = 3
value = {{1,3},{4,5,6},{8}}
Output: 1 3 4 5 6 8
Explanation:
The test case has 3 sorted linked
list of size 2, 3, 1.
1st list 1 -> 3
2nd list 4 -> 5 -> 6
3rd list 8
The merged list will be
1->3->4->5->6->8.



struct Node
{
	int data;
	Node* next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};
*/ 
class compare{
    public:
    bool operator()(Node* a,Node* b)
    {
        return a->data>b->data;
    }
    
};

class Solution{
  public:
    Node* merge(Node* a,Node* b)
    {
        Node* res=new Node(0);
        Node* mergerd = res;
        while(a!=NULL && b!=NULL)
        {
            if(a->data < b->data)
            {
                res->next=a;
                res=res->next;
                a=a->next;
            }
            else 
            {
                res->next=b;
                res=res->next;
                b=b->next;
            }
        }
        
        if(a!=NULL)
        {
            res->next=a;
        }
        else 
        {
            res->next=b;
        }
        return mergerd->next;
    }
    //Function to merge K sorted linked list.
    Node * mergeKLists(Node *arr[], int K)
    {
           // Your code here
    // Method-1 with considering two linklist at atime 
        //   int i=0,j=K;
        //   while((i+1)<j)
        //   {
        //       arr[0]= merge(arr[0],arr[i+1]);
        //       i++;
        //   }
        //   return arr[0];
        
        // Metohd -2 with heap
        
        priority_queue<Node*, vector<Node*>, compare> minHeap;
        
        if(K==0)
        {
            return NULL;
        }
        
        for(int i =0 ;i<K;i++)
        {
            minHeap.push(arr[i]);
        }
        
        Node* head=NULL;
        Node* tail= NULL;
        
        while(minHeap.size()>0)
        {
            Node* top = minHeap.top();
            minHeap.pop();
            if(top->next!=NULL)
            {
                minHeap.push(top->next);
            }
            if(head==NULL)
            {
                head= top;
                tail= top;
            }
            else
            {
                tail->next= top;
                tail = top;
            }
        }
        return head;
    }
};
