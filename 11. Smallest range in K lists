Given K sorted lists of integers, KSortedArray[] of size N each. The task is to find the smallest range that includes at least one element from each of the K lists. If more than one such range's are found, return the first such range found.

Example 1:

Input:
N = 5, K = 3
KSortedArray[][] = {{1 3 5 7 9},
                    {0 2 4 6 8},
                    {2 3 5 7 11}}
Output: 1 2
Explanation: K = 3
A:[1 3 5 7 9]
B:[0 2 4 6 8]
C:[2 3 5 7 11]
Smallest range is formed by number 1
present in first list and 2 is present
in both 2nd and 3rd list.
Example 2:

Input:
N = 4, K = 3
KSortedArray[][] = {{1 2 3 4},
                    {5 6 7 8},
                    {9 10 11 12}}
Output: 4 9

// you are required to complete this function 
// function should print the required range

class node{
    public:
    int data;
    int row;
    int col;
    
    node(int d,int r,int c)
    {
        data= d;
        row= r;
        col= c;
    }
    
};
class compare{
    public:
    bool operator()(node* a,node* b)
    {
        return a->data > b->data;
    }
};
class Solution{
    public:
    pair<int,int> findSmallestRange(int KSortedArray[][N], int n, int k)
    {
          //code here
          pair<int, int> ans;
          
          priority_queue<node*, vector<node*>, compare> minHeap;
          int mini= INT_MAX, maxi= INT_MIN;

          for(int i=0;i<k;i++)
          {
              int element= KSortedArray[i][0];
                mini= min(mini,element);
                maxi= max(maxi,element);
                minHeap.push(new node(element,i,0));                
          }
          int start= mini, end= maxi;
          
          while(!minHeap.empty())
          {
              node* temp = minHeap.top();
              minHeap.pop();
              mini= temp->data;
              
              if(maxi-mini < end -start)
              {
                  start= mini;
                  end= maxi;
              }
              
              if(temp->col +1 <n)
              {
                  maxi= max(maxi,KSortedArray[temp->row][temp->col +1] );
                  minHeap.push(new node(KSortedArray[temp->row][temp->col +1], temp->row,temp->col+1));
              }
              else 
              {
                  break;
              }
          }
          ans.first= start;
          ans.second= end;
          return ans;
    }
};
