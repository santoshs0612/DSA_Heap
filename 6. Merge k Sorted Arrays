Given K sorted arrays arranged in the form of a matrix of size K*K. The task is to merge them into one sorted array.
Example 1:

Input:
K = 3
arr[][] = {{1,2,3},{4,5,6},{7,8,9}}
Output: 1 2 3 4 5 6 7 8 9
Explanation:Above test case has 3 sorted
arrays of size 3, 3, 3
arr[][] = [[1, 2, 3],[4, 5, 6], 
[7, 8, 9]]
The merged list will be 
[1, 2, 3, 4, 5, 6, 7, 8, 9].
Example 2:

Input:
K = 4
arr[][]={{1,2,3,4}{2,2,3,4},
         {5,5,6,6},{7,8,9,9}}
Output:
1 2 2 2 3 3 4 4 5 5 6 6 7 8 9 9 
Explanation: Above test case has 4 sorted
arrays of size 4, 4, 4, 4
arr[][] = [[1, 2, 2, 2], [3, 3, 4, 4],
[5, 5, 6, 6]  [7, 8, 9, 9 ]]
The merged list will be 
[1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 
6, 6, 7, 8, 9, 9 ].



class data{
    public:
    int val, apos,vpos;
    data(int d, int ap,int vp)
    {
        val= d;
        apos= ap;
        vpos= vp;
    }
};

struct mycomp{
  bool operator()(data &d1 ,data &d2){
      return d1.val>d2.val;
  }
  
};
class Solution
{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
        //code here
        // priority_queue<int, vector<int>, greater<int>> minheap;
        // vector<int> ans;
        // for(int i=0;i<K;i++)
        // {
        //uw     for(int j=0;j<K;j++)
        //     {
        //         minheap.push(arr[i][j]);
        //     }
        // }
        
        // while(!minheap.empty())
        // {
        //     ans.push_back(minheap.top());
        //     minheap.pop();
        // }
        // return ans;
        
        //////////////////
        //method-2
        /////////////////
        
        vector<int> ans;
        priority_queue<data,vector<data>, mycomp> pq;
        
        for(int i=0;i<K;i++)
        {
            data d(arr[i][0],i,0);
            pq.push(d);
        }
        
        while(!pq.empty())
        {
            data curr = pq.top();
            pq.pop();
            ans.push_back(curr.val);
            int ap = curr.apos;
            int vp= curr.vpos;
            if(vp+1< arr[ap].size())
            {
                data d(arr[ap][vp+1],ap,vp+1);
                pq.push(d);
            }
        }
        return ans;
        
    }
};
