
#include<bits/stdc++.h>
using namespace std;

class heap{
  public: 
  int arr[100];
  int size=0;
      // creating constructor 
  heap()
  {
      arr[0]=-1;
      size=0;
      
  }
  /// inserting element into heap 
  // Time complexity is O(log(n));
  
  void insert(int val)
  {
      size= size+1;
      int index= size;
      arr[index]= val;

      // rearranging inserted data to its correct position
      // if Node @ i 
      // left_index= 2*i or for zero indexing 2*i+1
      // right_index= 2*i+1 or for zero indexing 2*i+2
      while(index>1)
      {
          int parent = index/2;// i/2 means parent node 
          // For Max heap ( for mean heap arr[parent]>arr[size])
          if(arr[parent]< arr[size])
          {
              swap(arr[parent], arr[size]);
              index= parent;
          }
          else 
          {
              return;
          }
          
      }
  }
  
  ///// Deletio of element for heap(root node) O(log(n))
  
  void deleteFromHeap()
  {
      if(size==0)
      {
          cout<<" Noting is present to delete From Heap";
          return;
      }
      
      // Replacing root node with last node  and decrease the size do element deleted
      arr[1]= arr[size];
      size--;
      
      int i = 1;
      
      while(i<size)
      {
          
          int left_index= 2*i;
          int right_index=2*i+1;
          
          if(left_index<size && arr[left_index]> arr[i])
          {
              swap(arr[left_index],arr[i]);
              i= left_index;
          }
          else if(right_index<size && arr[right_index]>arr[i])
          {
              swap(arr[right_index],arr[i]);
              i= right_index;
          }
          else 
          {
              return;
          }
      }
  }
  
  
  void print()
  {
      for(int i=1;i<=size;i++)
      {
          cout<<arr[i]<<" ";
      }
      cout<<endl;
  }
};


// hepify Algo with Log(N) complexity

void hepify(int arr[], int n,int i)
{
    int largest = i; 
    int left_index= 2*i;
    int right_index= 2*i+1;
    
    if(left_index<n && arr[left_index]> arr[largest])
    {
        largest= left_index;
    }
    else if(right_index<n && arr[right_index]>arr[largest])
    {
        largest= right_index;
    }
    
    if(largest!=i)
    {
        swap(arr[largest],arr[i]);
        hepify(arr,n,largest);
    }
    
}

int main()
{
    heap h;
    h.insert(55);
    h.insert(60);
    h.insert(50);
    h.insert(45);
    h.insert(40);
    
    h.print();
    h.deleteFromHeap();
    h.print();
    
    // testing hepify
    int n=6;
    int arr[n]= {-1,40,55,45,50,60};
    
    for(int i=(n-1)/2;i>0;i--)
    {
        hepify(arr,n,i);
    }
    for(int i=1;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return 0;
}
