Given a binary tree. The task is to check whether the given tree follows the max heap property or not.
Note: Properties of a tree to be a max heap - Completeness and Value of node greater than or equal to its child.

Example 1:

Input:
      5
    /  \
   2    3
Output: 1
Explanation: The given tree follows max-heap property since 5,
is root and it is greater than both its children.

Example 2:

Input:
       10
     /   \
    20   30 
  /   \
 40   60
Output: 0



// Structure of node
/*struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};*/

class Solution {
  public:
  int nodeCount(struct Node* root)
  {
      if(root==NULL)
      {
          return 0;
      }
      int ans = 1+nodeCount(root->left)+nodeCount(root->right);
      return ans;
  }
  bool isCBT(struct Node* root, int ind,int nodecnt)
  {
      if(root==NULL)
      {
          return true;
      }
      if(ind>=nodecnt)
      {
          return false;
      }
      else 
      {
          bool left = isCBT(root->left, 2*ind+1,nodecnt);
          bool right= isCBT(root->right, 2*ind+2,nodecnt);
          return left&&right;
      }
  }
  
  bool ismaxHeap(struct Node* root)
  {
      if(root->left==NULL && root->right==NULL)
      {
          return true;
      }
      if(root->right==NULL)
      {
          return root->data>root->left->data;
      }
      else 
      {
          bool left= ismaxHeap(root->left);
          bool right= ismaxHeap(root->right);
          return (left&& right &&(root->data>root->left->data)&& (root->data>root->right->data));
      }
  }
    bool isHeap(struct Node* tree) {
        // code here
        int ind=0;
        int nodecnt= nodeCount(tree);
        if(isCBT(tree,ind,nodecnt) && ismaxHeap(tree))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
};
